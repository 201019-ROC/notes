Webservices/Rest

Webservice
	- software that allows the exchange of information over a network
	- exposed via a consumable API

Service Oriented Architecture (SOA)
	- concept of breaking up applications into discrete units of functionality
		- results in modular and independent applications
			- allows for services to easily be integrates together
	- self-contained
	- black-box implementation
		- don't how the service was implemented

REST
	- stands for "REpresentational State Transfer"
	- used for the exchange and manipulation of "resources"
		- any information can be a resource
	- Architecture - Implementation of SOA
	- Leverages the HTTP protocol and can support any content-type (JSON, XML...)
	- REST Constraints/Principles:
		- client-server architecture: front end and back end are 2 separate applications interacting over a network
		- statelessness: server does not track user states
		- cacheability: particular responses from the back-end can be cached for easy reuse
		- layered system: application may use a layered system architecture, however layers are only aware of the next one
		- uniform interface: patterns for requests/responses
			- URI (Uniform Resource Identifier) model: used to identify a particular resource: 
				[address to application]/[collection]/[identifier]
			- resources are manipulated through representations
			- self-descriptive messages: using HTTP verbs and URI to identify desired behavior
			- HATEOS
				- Hypermedia as the engine of application state
				- Hypermedia links can be placed in the response content
					- Allows a client to dynamically navigate the appropriate resources using hypermedia link
		- code on demand: OPTIONAL
			- usually XML/JSON is returned
			- backend can provide code/scripts to offer additional functionality to the front end