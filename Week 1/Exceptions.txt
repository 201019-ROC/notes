Exception:
	- Object created from the exception class or its subclasses
		- Represents a condition that prevents a method from completing successfully
	- Inherit from the Throwable class
	- Divided into Checked and Unchecked Exception
		- Checked exceptions are checked at compile time
			- Subclass of Exception but not RuntimeException
			- Arise from circumstances outside of the programmer's control
				- ie: FileNotFoundException, ClassNotFoundException
		- Unchecked/Runtime exceptions are not accounted for by the compiler
			- Subclass of RuntimeException
			- Arises from coding errors/can usually be prevented
				- ie: ArrayIndexOutOfBoundsException, ArithmeticException, NullPointerException.
		- ALL EXCEPTIONS OCCUR AT RUN TIME.
Errors:
	- Error also extends Throwable
	- Identify internal errors that are rare and cannot be recovered from
	- As such, it is best practice not to catch errors
	- Examples:
		- StackOverflowError: Thrown by the JVM when a method calls itself too many times - ie: infinite recursion
		- NoClassDefFoundError: Thrown by the JVM when a class that the code uses is available at compile time but not runtime


Checked exception
	- Checked at compile time
	- Needs to be handled

Unchecked exception
	- Occurs at runtime
	- Can be handled, but does not need to be handled

Error
	- Can be handled, but should not be handled

Exception Handling
	- Try block - encapsulate any statements that may throw an exception
	- Catch block - Exception Handler, specifies what behavior is to occur if the exception is thrown
		- catch (Exception e){ specify exception handling behavior}
			- best practice to handle exception and remove stack trace
		- Can have multiple catch block to handle an exception.
			- Should be ordered from most specific to least specific, otherwise the most generic exception will catch all.
		- Can catch multiple exceptions with the same catch block
			- catch ([ExceptionType1] | [ExceptionType2] e){}
				- Should be siblings on the exception hierarchy.
	- finally block - executes regardless of the outcome
		- Used to freeup resources after the try statements
	
	- try-with resources - Allows to close the resource with needing a finally block
		- resource must implement autoclosable
		
	Valid:
		- Try-catch(as many as we want)
		- Try-catch-finally
		- Try-finally
	

	- If there is not enough information at the time an exception is thrown, we can let Java know that the exception will be handled at a later time using the "thorws" keyowrd
		- Throwing an exception: throw new Exception();

Custom exception
	- A custom exception may be created by extending Exception or its subclasses
		- To create a a Runtime exception, extend RuntimeException or its subclasses